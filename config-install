# clone repository into a bare git repository
git clone --bare https://github.com/nomispaz/dotfiles.git $HOME/git_repos/dotfiles
# predefine config as alias for git with set git- and work-tree
function config {
   git --git-dir=$HOME/git_repos/dotfiles/ --work-tree=$HOME $@
}

# checkout the dotfiles
mkdir -p .config-backup
config checkout
if [ $? = 0 ]; then
  echo "Checked out config.";
  else
    echo "Backing up pre-existing dot files.";
    config checkout 2>&1 | egrep "\s+\." | awk {'print $1'} | xargs -I{} mv {} .config-backup/{}
fi;
config checkout
# don't show untracked files since all files in $HOME would be shown
config config status.showUntrackedFiles no

# check for distribution specific settings
custom_config=$(cat /etc/os-release | grep "^ID=" | cut -d '=' -f 2)
SOURCE_DIR="$HOME/git_repos/dotfiles/.config_$custom_config"
TARGET_DIR="$HOME/.config_test"
echo $SOURCE_DIR

  if [ -d "$SOURCE_DIR" ]; then
    echo "Using config for distribution: $custom_config"

    # Recursively find files (not directories) in source
    find "$SOURCE_DIR" -type f | while read -r src_file; do
      # Compute relative path from source dir
      rel_path="${src_file#$SOURCE_DIR/}"

      # Compute the target path in ~/.config
      target_file="$TARGET_DIR/$rel_path"

      # Ensure the target directory exists
      target_dir="$(dirname "$target_file")"
      mkdir -p "$target_dir"

      # If file already exists, back it up or skip
      if [ -e "$target_file" ] && [ ! -L "$target_file" ]; then
          echo "Backing up existing file: $target_file -> $target_file.bak"
          mv "$target_file" "$target_file.bak"
      fi

      # Create (or overwrite) the symlink
      ln -sf "$src_file" "$target_file"
      echo "Linked: $target_file -> $src_file"
    done
else
    echo "No host-specific config found for $custom_config"
fi
