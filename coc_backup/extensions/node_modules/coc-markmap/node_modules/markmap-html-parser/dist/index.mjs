import { load } from "cheerio";
import { walkTree } from "markmap-common";
var Levels = /* @__PURE__ */ ((Levels2) => {
  Levels2[Levels2["None"] = 0] = "None";
  Levels2[Levels2["H1"] = 1] = "H1";
  Levels2[Levels2["H2"] = 2] = "H2";
  Levels2[Levels2["H3"] = 3] = "H3";
  Levels2[Levels2["H4"] = 4] = "H4";
  Levels2[Levels2["H5"] = 5] = "H5";
  Levels2[Levels2["H6"] = 6] = "H6";
  Levels2[Levels2["Block"] = 7] = "Block";
  Levels2[Levels2["List"] = 8] = "List";
  Levels2[Levels2["ListItem"] = 9] = "ListItem";
  return Levels2;
})(Levels || {});
const MARKMAP_COMMENT_PREFIX = "markmap: ";
const SELECTOR_HEADING = /^h[1-6]$/;
const SELECTOR_LIST = /^[uo]l$/;
const SELECTOR_LIST_ITEM = /^li$/;
const defaultOptions = {
  selector: "h1,h2,h3,h4,h5,h6,ul,ol,li,table,pre,p>img:only-child",
  selectorWrapper: "div,p",
  selectorNesting: "ul,ol,li",
  selectorPreserveTag: "table,pre,img"
};
function getLevel(tagName) {
  if (SELECTOR_HEADING.test(tagName))
    return +tagName[1];
  if (SELECTOR_LIST.test(tagName))
    return 8;
  if (SELECTOR_LIST_ITEM.test(tagName))
    return 9;
  return 7;
}
function parseHtml(html, opts) {
  const options = {
    ...defaultOptions,
    ...opts
  };
  const $ = load(html);
  const $root = $("body");
  let id = 0;
  const rootNode = {
    id,
    tag: "",
    html: "",
    level: 0,
    parent: 0,
    childrenLevel: 0,
    children: []
  };
  const elMap = {
    [id]: $("<div>")
  };
  const headingStack = [];
  let skippingHeading = 0;
  checkNode($root);
  walkTree(rootNode, (node, next) => {
    next();
    const $el = elMap[node.id];
    $el.contents().each((_, child) => {
      if (child.type === "comment") {
        const data2 = child.data.trim();
        if (data2.startsWith(MARKMAP_COMMENT_PREFIX)) {
          node.comments || (node.comments = []);
          node.comments.push(data2.slice(MARKMAP_COMMENT_PREFIX.length).trim());
          $(child).remove();
        }
      }
    });
    const data = $el.data();
    if (data && Object.keys(data).length) {
      node.data = data;
    }
    node.html = (($el.is(options.selectorPreserveTag) ? $.html($el) : $el.html()) || "").trimEnd();
  });
  return rootNode;
  function addChild($child, parent, nesting) {
    const child = $child[0];
    const node = {
      id: ++id,
      tag: child.tagName,
      html: "",
      level: getLevel(child.tagName),
      childrenLevel: 0,
      children: nesting ? [] : void 0,
      parent: parent.id
    };
    if (parent.children) {
      if (parent.childrenLevel === 0 || parent.childrenLevel > node.level) {
        parent.children = [];
        parent.childrenLevel = node.level;
      }
      if (parent.childrenLevel === node.level) {
        parent.children.push(node);
      }
    }
    elMap[node.id] = $child;
    return node;
  }
  function getCurrentHeading(level) {
    let heading;
    while ((heading = headingStack.at(-1)) && heading.level >= level) {
      headingStack.pop();
    }
    return heading || rootNode;
  }
  function checkNode($el, node) {
    $el.children().each((_, child) => {
      const $child = $(child);
      if ($child.is(options.selectorWrapper)) {
        checkNode($child);
        return;
      }
      if (!$child.is(options.selector)) {
        const level2 = getLevel(child.tagName);
        if (level2 <= 6) {
          skippingHeading = level2;
        }
        return;
      }
      const level = getLevel(child.tagName);
      if (skippingHeading > 0 && level > skippingHeading) {
        return;
      }
      skippingHeading = 0;
      if ($child.is(options.selectorNesting)) {
        const childNode2 = addChild(
          $child,
          node || getCurrentHeading(level),
          true
        );
        if (childNode2) {
          checkNode($child, childNode2);
          $child.remove();
        }
        return;
      }
      const isHeading = level <= 6;
      const childNode = addChild(
        $child,
        node || getCurrentHeading(level),
        isHeading
      );
      if (isHeading)
        headingStack.push(childNode);
    });
  }
}
function convertNode(htmlRoot) {
  return walkTree(htmlRoot, (htmlNode, next) => {
    const node = {
      content: htmlNode.html,
      children: next() || []
    };
    if (htmlNode.data) {
      node.payload = {
        ...htmlNode.data
      };
    }
    if (htmlNode.comments) {
      if (htmlNode.comments.includes("foldAll")) {
        node.payload = { ...node.payload, fold: 2 };
      } else if (htmlNode.comments.includes("fold")) {
        node.payload = { ...node.payload, fold: 1 };
      }
    }
    return node;
  });
}
function buildTree(html, opts) {
  const htmlRoot = parseHtml(html, opts);
  return convertNode(htmlRoot);
}
export {
  Levels,
  buildTree,
  convertNode,
  defaultOptions,
  parseHtml
};
