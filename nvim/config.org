* General options
Set leader-key to space.
#+BEGIN_SRC lua :tangle ~/.config/nvim/init.lua
vim.g.mapleader = " "
vim.g.maplocalleader = " "
vim.keymap.set({"n","v"}, "<Space>", "<Nop>", { silent = true })
#+END_SRC
Load various configs
#+BEGIN_SRC lua :tangle~/.config/nvim/init.lua
require("config.icons")
require("config.keymaps")
#+END_SRC
Set several other options.
#+BEGIN_SRC lua :tangle ~/.config/nvim/init.lua
local opt = vim.opt

vim.g.autoformat = true

opt.clipboard = "unnamedplus" -- Sync with system clipboard
opt.confirm = true -- Confirm to save changes before exiting modified buffer
opt.cursorline = false -- highlighting of the current line
opt.expandtab = true -- Use spaces instead of tabs
opt.ignorecase = true -- Ignore case
opt.inccommand = "nosplit" -- preview incremental substitute
opt.laststatus = 3 -- global statusline
opt.mouse = "a" -- Enable mouse mode
opt.number = true -- Print line number
opt.scrolloff = 4 -- Lines of context
opt.shiftround = true -- Round indent
opt.shiftwidth = 4 -- Size of an indent
opt.showmode = false -- Dont show mode since we have a statusline
opt.smartcase = true -- Don't ignore case with capitals
opt.smartindent = true -- Insert indents automatically
opt.spelllang = { "en" }
opt.splitbelow = true -- Put new windows below current
opt.splitkeep = "screen"
opt.splitright = true -- Put new windows right of current
opt.timeoutlen = 300
opt.undofile = true
opt.undolevels = 10000
opt.wildmode = "longest:full,full" -- Command-line completion mode
opt.wrap = true -- line wrap
opt.conceallevel = 2 --conceal links
opt.concealcursor = 'nc'
opt.completeopt = {'menu', 'menuone', 'noselect'} --autocomplete selection
#+END_SRC
* Lazy plugin manager
Install plugin manager
#+BEGIN_SRC lua :tangle ~/.config/nvim/init.lua

local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
-- bootstrap lazy.nvim
vim.fn.system({ 
    "git", 
    "clone", 
    "--filter=blob:none", 
    "https://github.com/folke/lazy.nvim.git", 
    "--branch=stable",
    lazypath,
})
end
vim.opt.rtp:prepend(lazypath)

require("lazy").setup({
        spec = {
            { import = "plugins" },
        },
        defaults = {
            -- It's recommended to leave version=false for now, since a lot the plugin that support versioning,
            -- have outdated releases, which may break your Neovim install.
            version = false, -- always use the latest git commit
            -- version = "*", -- try installing the latest stable version for plugins that support semver
        }
})
#+END_SRC
* Colorscheme
Install Colorscheme tokynight
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/colorscheme.lua

return {
    {
      "folke/tokyonight.nvim",
      lazy = false,
      priority = 1000,
      opts = {},
    },
}
#+END_SRC

Load colorscheme
#+BEGIN_SRC lua :tangle ~/.config/nvim/init.lua

vim.cmd.colorscheme "tokyonight-night"
#+END_SRC
* Lualine
Preconfigured statusline
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/lualine.lua
return {
    {
        'nvim-lualine/lualine.nvim',
        dependencies = { 'nvim-tree/nvim-web-devicons' },
        config = function()
            require('lualine').setup()
        end,
    },
}
#+END_SRC
* Bufferline
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/bufferline.lua
return {
    {
        "akinsho/bufferline.nvim",
        event = "VeryLazy",
        opts = {
            options = {
                diagnostics = "nvim_lsp",
                always_show_bufferline = false,
            },
        },
    },
}
#+END_SRC
* Neovim tree
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/neotree.lua
return {
    {
        "nvim-neo-tree/neo-tree.nvim",
        branch = "v3.x",
        dependencies = {
        "nvim-lua/plenary.nvim",
        "nvim-tree/nvim-web-devicons", -- not strictly required, but recommended
        "MunifTanjim/nui.nvim",
        -- "3rd/image.nvim", -- Optional image support in preview window: See `# Preview Mode` for more information
        },
   },
}
#+END_SRC
* Which-key
** Install
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/whichkey.lua
return {
    "folke/which-key.nvim",
    event = "VeryLazy",
    init = function()
        vim.o.timeout = true
        vim.o.timeoutlen = 300
    end,
}
#+END_SRC
** Keyconfigs
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/config/whichkey.lua
local wk = require("which-key")

local setup = {
    window = {
        border = "rounded", -- none, single, double, shadow
        position = "bottom", -- bottom, top
        margin = { 1, 0, 1, 0 }, -- extra window margin [top, right, bottom, left]
        padding = { 2, 2, 2, 2 }, -- extra window padding [top, right, bottom, left]
        winblend = 0,
    },
    layout = {
        height = { min = 4, max = 25 }, -- min and max height of the columns
        width = { min = 20, max = 50 }, -- min and max width of the columns
        spacing = 3, -- spacing between columns
        align = "left", -- align columns left, center or right
    },
}

local opts = {
    mode = "n", -- NORMAL mode
    prefix = "",
    buffer = nil, -- Global mappings. Specify a buffer number for buffer local mappings
    silent = true, -- use `silent` when creating keymaps
    noremap = true, -- use `noremap` when creating keymaps
    nowait = true, -- use `nowait` when creating keymaps
}

local mappings = {
    ["f"] = {
        name = "Open files", 
        f = { "<cmd>Telescope find_files<cr>", "Find File"},
        r = { "<cmd>Telescope oldfiles<cr>", "Recent Files"},
        n = { "<cmd>ene <BAR> startinsert<cr>", "New File"},
        g = { "<cmd>Telescope live_grep<cr>", "Search files (grep)"},
        p = { "<cmd>Telescope projects<cr>", "Project list"}
    },
    ["t"] = {
        name = "Telescope search functions",
        k = { "<cmd>Telescope keymaps<cr>", "Display keymaps"},
        f = { "<cmd>Telescope current_buffer_fuzzy_find<cr>", "Fuzzy find in buffer"},
        d = { "<cmd>Telescope diagnostics<cr>", "LSP Errors/Warnings"},
    },
    ["p"] = { "<cmd>Lazy<CR>", "Plugin Manager" }, 
--    ["m"] = { "<cmd>MarkdownPreviewToggle<cr>", "Markdown Preview"},
    ["e"] = { "<cmd>Neotree toggle<cr>", "Toggle Neotree"},

    [","] = { "<cmd>WhichKey<CR>", "WhichKey" },
    ["b"] = {
        name = "Tabs",
        ["b"] = { "<cmd>Telescope buffers<cr>", "Switch to buffer" },
        ["k"] = { "<cmd>bd<cr>", "Close  buffer" },
        ["<Left>"] = { "<cmd>:BufferLineCyclePrev<cr>", "Switch to left buffer" },
        ["<Right>"] = { "<cmd>:BufferLineCycleNext<cr>", "Switch to right buffer" },
    },
    ["s"] = {
        name = "Session management",
        ["s"] = { [[<cmd>lua require("persistence").load()<cr>]], "Restore Session for current directory" },
        ["l"] = { [[<cmd>lua require("persistence").load({ last = true })<cr>]], "Restore last session" },
        ["d"] = { [[<cmd>lua require("persistence").stop()<cr>]], "Don't save session on exit" },
    },
    ["o"] = {
        name = "Org-mode",
        ["a"] = { "oa", "Org-Agenda"},
        ["t"] = { "ot", "Add tag"},
        ["i"] = {
            name = "Insert",
            ["s"] = { "ois", "Insert scheduled date"},
            ["t"] = { "oit", "Insert todo item"},
        },
        ["b"] = {
            name = "Babel",
            ["t"] = { "obt", "Export code blocks"},
        },
        ["l"] = { 
            name = "Links",
            ["s"] = { "ols", "Store link ID"},
            ["i"] = { "oli", "Insert stored link ID"},
        },
        ["o"] = { "oo", "Jump to link destination"},
    },
}

wk.setup(setup)
wk.register(mappings, { prefix = "<leader>" }, opts)

#+END_SRC
* Telescope
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/telescope.lua
return {
    { 
        "nvim-telescope/telescope.nvim",
        dependencies = { "nvim-lua/plenary.nvim" }
    },
}
#+END_SRC
* Luasnip
Snippets to use for autocomplete
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/luasnip.lua
return {
    { 
        "L3MON4D3/LuaSnip", event = "VeryLazy",
        dependencies = {
        {
            "rafamadriz/friendly-snippets",
            config = function()
              require("luasnip.loaders.from_vscode").lazy_load()
            end,
          },
        },
    },
}
#+END_SRC
* Mini pairs
Autoclose brackets
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/minipairs.lua

return {
    {
        "echasnovski/mini.pairs",
        event = "VeryLazy",
    },
}
#+END_SRC
* Orgmode
** Setup Orgmode
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/orgmode.lua

return {
    {
    'nvim-orgmode/orgmode',
    dependencies = {
        { 'nvim-treesitter/nvim-treesitter', lazy = true },
    },
    event = 'VeryLazy',
    config = function()
        -- Load treesitter grammar for org
        require('orgmode').setup_ts_grammar()

        -- Setup treesitter
        require('nvim-treesitter.configs').setup({
        highlight = {
            enable = true,
        },
        ensure_installed = { 'org' },
        })

        -- Setup orgmode
        require('orgmode').setup({
        org_agenda_files = '~/orgmode/**/*',
        org_default_notes_file = '~/orgmode/refile.org',
        org_startup_indented = true,
        org_hide_leading_stars = true,
        org_hide_emphasis_markers = true,
        org_id_link_to_org_use_id = true,
        emacs_config = { executable_path = 'emacs', config_path='$HOME/.config/nvim/init_export.el' }

        })
    end,
    }
}
#+END_SRC
** Setup Orgmode-headlines
Nicer Headlines and config options for Code-blocks. Additionally bullets instead of stars for headlines
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/orgmode-headlines.lua
return {
    "lukas-reineke/headlines.nvim",
    dependencies = "nvim-treesitter/nvim-treesitter",
}
#+END_SRC
** emacs config
Create empty emacs config so that babel and export in orgmode can use emacs.
#+BEGIN_SRC elisp :tangle ~/.config/nvim/init_export.el
 
#+END_SRC
* Session management
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/persistence.lua
return {
    {
        "folke/persistence.nvim",
        event = "BufReadPre",
        opts = { options = vim.opt.sessionoptions:get() },
    },
}
#+END_SRC
* IDE
** Treesitter
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/treesitter.lua
return {
    { 
        "nvim-treesitter/nvim-treesitter",
        version = false,
        config = function()
            require("nvim-treesitter.configs").setup({
                -- A list of parser names, or "all"
                ensure_installed = { 
                    "bash",
                    "c",
                    "diff",
                    "html",
                    "javascript",
                    "jsdoc",
                    "json",
                    "jsonc",
                    "lua",
                    "luadoc",
                    "luap",
                    "markdown",
                    "markdown_inline",
                    "python",
                    "query",
                    "regex",
                    "toml",
                    "tsx",
                    "typescript",
                    "vim",
                    "vimdoc",
                    "yaml",
                },

                -- Install parsers synchronously (only applied to `ensure_installed`)
                sync_install = false,

                -- Automatically install missing parsers when entering buffer
                -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
                auto_install = false,

                highlight = {
                    enable = true,
                    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
                    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
                    -- Using this option may slow down your editor, and you may see some duplicate highlights.
                    -- Instead of true it can also be a list of languages
                    additional_vim_regex_highlighting = false,
                  },

                  incremental_selection = {
                      enable = true,
                  }
            }
            )
        end,
    },
    -- Show context of the current function
    {
        "nvim-treesitter/nvim-treesitter-context",
        enabled = true,
        opts = { 
            mode = "cursor", 
            max_lines = 4,
            multiline_threshold = 2, -- Maximum number of lines to show for a single context
        },
    },
}
#+END_SRC
** Autocomplete
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/nvimcmp.lua
return {
    "hrsh7th/nvim-cmp",
    version = false,
    dependencies = {
        "hrsh7th/cmp-nvim-lsp",
        "hrsh7th/cmp-buffer",
        "hrsh7th/cmp-path",
        "L3MON4D3/LuaSnip",
        "saadparwaiz1/cmp_luasnip",
    },
    
    config = function()
    local has_words_before = function()
      unpack = unpack or table.unpack
      local line, col = unpack(vim.api.nvim_win_get_cursor(0))
      return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
    end

    local cmp = require('cmp')
    local luasnip = require('luasnip')

    cmp.setup({
      snippet = {
        expand = function(args)
          luasnip.lsp_expand(args.body)
        end
      },
      completion = {
        autocomplete = false
      },
       mapping = cmp.mapping.preset.insert ({
           ["<Tab>"] = cmp.mapping(function(fallback)
           if cmp.visible() then
             cmp.select_next_item()
           elseif luasnip.expand_or_jumpable() then
             luasnip.expand_or_jump()
          elseif has_words_before() then
             cmp.complete()
           else
             fallback()
           end
         end, { "i", "s" }),
         ["<c-e>"] = cmp.mapping.abort(),
         ["<CR>"] = cmp.mapping.confirm({ select=true }),
        }),
      sources = {
        { name = "nvim_lsp" },
        { name = "luasnip" },
        { name = "buffer" },
        { name = "path" },
        { name = "orgmode" },
      }
    })
  end
}
#+END_SRC
** LSP-Config
Currently only python with lsp pylsp configured
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/lspconfig.lua
return {
    "neovim/nvim-lspconfig",
    dependencies = {
        "williamboman/mason.nvim",
        "williamboman/mason-lspconfig.nvim"
    },
  config = function()
    local capabilities = vim.lsp.protocol.make_client_capabilities()
    capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)

    require('mason').setup()
    local mason_lspconfig = require 'mason-lspconfig'
    mason_lspconfig.setup {
        --ensure_installed = { "pyright", "marksman" }
       ensure_installed = { "pylsp", "marksman" }

    }
    --require("lspconfig").pyright.setup {
    --    capabilities = capabilities,
    --}
    require("lspconfig").pylsp.setup{
        settings ={
            pylsp = {
                plugins = {
                    pyflakes = { enabled = true,
                                 maxLineLength = 200},
                    black = { enabled = true },
                    pylsp_mypy = { enabled = true },
                    pycodestyle = {
			 maxLineLength = 200,
                    },
                    --jedi_completion = { fuzzy = true },
                }
            }
        }
    }
    require("lspconfig").marksman.setup {
        capabilities = capabilities,
    }
  end
}
#+END_SRC
** Null-ls
Use neovim as a language server to hook into LSP.
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/nonels.lua
return {
    { "nvimtools/none-ls.nvim" },
}
#+END_SRC
** Devicons
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/devicons.lua
return {
    { "nvim-tree/nvim-web-devicons", lazy = true },
}
#+END_SRC
* Load Modules
Load custom configs and functions
#+BEGIN_SRC lua :tangle ~/.config/nvim/init.lua
require("config.whichkey")
#+END_SRC
* Keymaps
Keymaps outside of which-key
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/config/keymaps.lua
local keymap = vim.api.nvim_set_keymap

--work with tabs (nvim buffers)
keymap("n", "<C-tab>", "<cmd>Telescope buffers<cr>", { desc = "Switch Tab" })
keymap("n", "<C-w>", "<cmd>bd<cr>", { desc = "Close Tab" })

--Neotree
keymap("n", "<leader>e", "<cmd>Neotree toggle<cr>", { desc = "Toggle Neotree (root dir)" })

--session management
-- restore the session for the current directory
keymap("n", "<leader>ls", [[<cmd>lua require("persistence").load()<cr>]], {desc = "Restore Session for current directory"} )
-- restore the last session
keymap("n", "<leader>ll", [[<cmd>lua require("persistence").load({ last = true })<cr>]], { desc = "Restore last session" })
-- stop Persistence => session won't be saved on exit
keymap("n", "<leader>ld", [[<cmd>lua require("persistence").stop()<cr>]], { desc = "Don't save session on exit" })

--open search for files
--keymap("n", "<leader>f", "<cmd>Telescope find_files<cr>", { desc = "Open file search" })

--split windows
--horizontal
keymap("n", "<leader>s", "<cmd>split<cr>", { desc = "Horizontal split" })
--vertical
keymap("n", "<leader>v", "<cmd>vsplit<cr>", { desc = "Vertical split" })

--navigate windows
--up
keymap("n", "<leader><Up>", "<cmd>wincmd k<cr>", { desc = "Move to window above" })
--down
keymap("n", "<leader><Down>", "<cmd>wincmd j<cr>", { desc = "Move to window below" })
--left
keymap("n", "<leader><Left>", "<cmd>wincmd h<cr>", { desc = "Move to left window" })
--right
keymap("n", "<leader><Right>", "<cmd>wincmd l<cr>", { desc = "Move to right window" })

--markdown preview
keymap("n", "<leader>cp", "<cmd>MarkdownPreviewToggle<cr>", { desc = "Markdown Preview" })
#+END_SRC
* Additional configs
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/config/icons.lua
local M = {}

local icons = {
        misc = {
            dots = "󰇘",
        },
        dap = {
            Stopped             = { "󰁕 ", "DiagnosticWarn", "DapStoppedLine" },
            Breakpoint          = " ",
            BreakpointCondition = " ",
            BreakpointRejected  = { " ", "DiagnosticError" },
            LogPoint            = ".>",
        },
        diagnostics = {
            Error = " ",
            Warn  = " ",
            Hint  = " ",
            Info  = " ",
        },
        git = {
            added    = " ",
            modified = " ",
            removed  = " ",
        },
        kinds = {
            Array         = " ",
            Boolean       = "󰨙 ",
            Class         = " ",
            Codeium       = "󰘦 ",
            Color         = " ",
            Control       = " ",
            Collapsed     = " ",
            Constant      = "󰏿 ",
            Constructor   = " ",
            Copilot       = " ",
            Enum          = " ",
            EnumMember    = " ",
            Event         = " ",
            Field         = " ",
            File          = " ",
            Folder        = " ",
            Function      = "󰊕 ",
            Interface     = " ",
            Key           = " ",
            Keyword       = " ",
            Method        = "󰊕 ",
            Module        = " ",
            Namespace     = "󰦮 ",
            Null          = " ",
            Number        = "󰎠 ",
            Object        = " ",
            Operator      = " ",
            Package       = " ",
            Property      = " ",
            Reference     = " ",
            Snippet       = " ",
            String        = " ",
            Struct        = "󰆼 ",
            TabNine       = "󰏚 ",
            Text          = " ",
            TypeParameter = " ",
            Unit          = " ",
            Value         = " ",
        },
    }

for type, icon in pairs(icons.diagnostics) do
  local hl = "DiagnosticSign" .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
end

return M
#+END_SRC
* Disabled modules
Currently disabled
  - bufferline
  - neo-tree
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/disabled.lua
    return {
        { "akinsho/bufferline.nvim", enabled = false },
        { "nvim-neo-tree/neo-tree.nvim", enabled = false },
}
#+END_SRC
